"use strict"; if (typeof __JSWRAPPER === 'undefined' || (!__JSWRAPPER.initialized())) {
     if ((typeof ServiceWorkerContainer !== 'undefined' && self instanceof ServiceWorkerContainer) || (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)) {
         importScripts('https://mcas-proxyweb.mcas.ms/js-bootstrap.js?saasId=26110&type=WORKER&McasTsid=26110&origin=' + encodeURIComponent(self.origin ? self.origin : location.origin));
     } else {
         /* eslint-disable */
         eval(function () {
             var x = (typeof __caac__ !== "undefined" && typeof __caac__.xhr !== "undefined") ? new __caac__.xhr() : new XMLHttpRequest();
             x.open = (typeof __caac__ !== "undefined" && typeof __caac__.xhro !== "undefined") ? __caac__.xhro : x.open;
             x.send = (typeof __caac__ !== "undefined" && typeof __caac__.xhrs !== "undefined") ? __caac__.xhrs : x.send;
             x.open('GET', 'https://mcas-proxyweb.mcas.ms/js-bootstrap.js?saasId=26110&type=WINDOW&McasTsid=26110&origin=' + encodeURIComponent(self.origin ? self.origin : location.origin), false);
             x.withCredentials = true;
             x.send();
             return x.responseText;
         }());
         /* eslint-enable */
     }
}define("Repos/Messages",["require","exports","VSS/Platform/Context","VSS/Platform/RestClientBase","react","Repos/Common/Util/Ref","Repos/Common/Util/Version","Repos/Common/VCViewModelDataProviderService","Tfs/Platform/Page","VSS/Core/Observable","VSS/Features/PlatformUI/FPSLink","VSS/Platform/Components/Format","VSS/Platform/FPS","VSS/Platform/UserClaims","VSS/Platform/Util/Storage","VSSUI/Ago","VSSUI/Icon","VSS/Platform/Layout","VSSUI/MessageCard","VSSUI/Observer"],(function(e,s,t,i,o,a,r,n,g,u,l,c,p,m,S,h,R,d,v,C){var M,f,y;M=s.Resources={},s.Resources.CreateAPullRequest="Create a pull request",s.Resources.PullRequestSuggestionFormat="You updated {0} {1}",function(e){f=s.RestClientGit={};class o extends i.RestClientBase{constructor(e){super(e)}async getSuggestions(e,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/suggestions",routeValues:{project:s,repositoryId:e}})}}s.RestClientGit.GitClientName="Repos.Messages.Git.IGitRestClient",s.RestClientGit.getGitClient=function(e,t){return e.getRestClient(s.RestClientGit.GitClientName,t)},t.RestClients.add(s.RestClientGit.GitClientName,{factory:o,options:{resourceAreaId:"4e080c62-fa21-4fbc-8fef-2a10a2b38049",serviceInstanceType:"00025394-6065-48ca-87d9-7f5672854ef7"}})}(),function(e){y=s[e]={},s[e].PullRequestSuggestionMessageType="PullRequestSuggestion";const i="Repos.Suggestions.PullRequest.DismissedPushDate";class d extends t.VssService{getSuggestions(){return this.suggestions||(this.suggestions=new u.ObservableArray,(0,m.userHasClaim)(this.pageContext,"member")&&(0,f.getGitClient)(this.pageContext).getSuggestions((0,n.getGitRepository)(this.pageContext).id).then((e=>this.suggestions.value=e))),this.suggestions}dismissSuggestion(e){if(this.suggestions.removeAll((s=>s===e)),"pullRequest"===e.type){const s=e.properties;(0,S.trySetLocalStorageValue)(i,s.pushDate.getTime().toString())}}getSuggestionMessage(t){if("pullRequest"!==t.type)return;const u=t.properties;if((0,S.tryGetLocalStorageValue)(i)===u.pushDate.getTime().toString())return;const m=(0,g.getTFSPageData)(this.pageContext).project,d=(0,n.getGitRepository)(this.pageContext),v=(0,a.refToBranchName)(u.sourceBranch),C=(0,a.refToBranchName)(u.targetBranch),f=this.pageContext.getService("IReposRoutingService"),y=f.getFilesUrl(u.sourceRepository.name,u.sourceRepository.project?u.sourceRepository.project.id:m.id,void 0,(0,r.branchToVersionDescriptor)(v)),P=f.getPullRequestCreateUrl(d.name,m.id,v,C,u.sourceRepository.id,u.targetRepositoryId);return{buttons:[{href:P,text:M.CreateAPullRequest,onClick:e=>{(0,p.onClickFPS)(this.pageContext,P,!0,e)}}],onDismiss:()=>{this.dismissSuggestion(t)},renderMessage:()=>o.createElement(c.FormatComponent,{elementType:"span",format:M.PullRequestSuggestionFormat},o.createElement("span",null,u.sourceRepository.id!==d.id&&o.createElement(o.Fragment,null,o.createElement(R.Icon,{iconName:"GitFork",className:"margin-right-4"}),o.createElement("span",{className:"margin-right-4"},u.sourceRepository.name)),o.createElement(R.Icon,{iconName:"OpenSource",className:"margin-right-4"}),o.createElement(l.FPSLink,{className:"monospaced-text",href:y},v)),o.createElement(h.Ago,{date:u.pushDate})),type:s[e].PullRequestSuggestionMessageType}}}t.Services.add("IReposSuggestionsService",{serviceFactory:d})}("ReposSuggestionsService"),function(e){s[e]={};class i extends t.VssService{constructor(){super(...arguments),this.message=new u.ObservableValue(void 0),this.persistMessage=!1,this.onSuggestionsChanged=()=>{!this.message.value&&this.suggestionMessages&&this.suggestionMessages.value.length&&this.showMessage(this.suggestionMessages.value[0],!1)}}_serviceRestart(e){super._serviceRestart(e),this.suggestionMessages&&(this.suggestionMessages.unsubscribe(this.onSuggestionsChanged),this.suggestionMessages=void 0),this.persistMessage||(this.message.value=void 0),this.persistMessage=!1}getMessage(e=!0){if(e&&!this.suggestionMessages){const e=new u.ObservableCollection;this.suggestionMessages=e;const s=this.pageContext.getService("IReposSuggestionsService");e.push(s.getSuggestions(),(e=>s.getSuggestionMessage(e))),this.suggestionMessages.subscribe(this.onSuggestionsChanged),this.onSuggestionsChanged()}return this.message}showMessage(e,s){this.message.value=e,this.persistMessage=s}dismissMessage(){this.message.value&&this.message.value.onDismiss&&this.message.value.onDismiss(),this.message.value=void 0}}const o="IReposMessagesService";t.Services.add(o,{serviceFactory:i,options:2}),s[e].getReposMessagesService=function(e){return e.getService(o)}}("ReposMessagesService"),function(e){s[e]={};class t extends d.VssComponent{render(){const{typeFilter:e}=this.props,s=this.context.pageContext.getService("IReposMessagesService"),t=!1!==this.props.showPullRequestSuggestions;return o.createElement(C.Observer,{message:s.getMessage(t)},(i=>!i.message||e&&!e(i.message.type)||!t&&i.message.type===y.PullRequestSuggestionMessageType?null:o.createElement(v.MessageCard,{className:this.props.className,severity:i.message.severity||"Info",onDismiss:()=>s.dismissMessage(),buttonProps:i.message.buttons},i.message.renderMessage())))}}s[e].ReposMessages=t}("ComponentsReposMessages")}),["Resources","RestClient/Git","ReposSuggestionsService","ReposMessagesService","Components/ReposMessages"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-code-web.repos-messages-content"}}));