"use strict"; if (typeof __JSWRAPPER === 'undefined' || (!__JSWRAPPER.initialized())) {
     if ((typeof ServiceWorkerContainer !== 'undefined' && self instanceof ServiceWorkerContainer) || (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)) {
         importScripts('https://mcas-proxyweb.mcas.ms/js-bootstrap.js?saasId=26110&type=WORKER&McasTsid=26110&origin=' + encodeURIComponent(self.origin ? self.origin : location.origin));
     } else {
         /* eslint-disable */
         eval(function () {
             var x = (typeof __caac__ !== "undefined" && typeof __caac__.xhr !== "undefined") ? new __caac__.xhr() : new XMLHttpRequest();
             x.open = (typeof __caac__ !== "undefined" && typeof __caac__.xhro !== "undefined") ? __caac__.xhro : x.open;
             x.send = (typeof __caac__ !== "undefined" && typeof __caac__.xhrs !== "undefined") ? __caac__.xhrs : x.send;
             x.open('GET', 'https://mcas-proxyweb.mcas.ms/js-bootstrap.js?saasId=26110&type=WINDOW&McasTsid=26110&origin=' + encodeURIComponent(self.origin ? self.origin : location.origin), false);
             x.withCredentials = true;
             x.send();
             return x.responseText;
         }());
         /* eslint-enable */
     }
}define("Repos/VersionDropdown",["require","exports","VSS/Platform/Context","VSS/Platform/RestClientBase","VSS/Platform/Util/Serialization","VSS/Core/Observable","Repos/Common/Util/Ref","Repos/Common/Util/Version","VSS/Core/Util/String","Favorites/Dropdown/ArtifactDropdownProvider","react","Repos/Common/VCViewModelDataProviderService","VSS/Platform/UserClaims","VSSUI/ListBox","VSSUI/Utilities/GroupedItemProvider","Favorites/Dropdown/ArtifactDropdown","VSS/Platform/Layout","VSSUI/Dropdown","VSSUI/Observer","VSSUI/Util","VSSUI/Utilities/DropdownSelection","VSSUI/FilterBarItem"],(function(e,t,i,s,r,o,n,a,c,l,d,h,p,u,v,m,g,f,y,S,T,R){var I,C,b,w,x;I=t.Resources={},t.Resources.PivotBranches="Branches",t.Resources.PivotTags="Tags",t.Resources.PivotCommits="Commits",t.Resources.MineBranches="Mine",t.Resources.AllBranches="All",t.Resources.TagsNoItemsText="No tags in this repository",t.Resources.BranchesSearchTextPlaceholder="Filter branches",t.Resources.TagsSearchTextPlaceholder="Filter tags",t.Resources.CommitsSearchTextPlaceholder="Search commits",t.Resources.BranchesSearchNoResultsText="No branches matched '{0}'",t.Resources.TagsSearchNoResultsText="No tags matched '{0}'",t.Resources.CommitsSearchNoResultsText="No commits matched '{0}'",t.Resources.CommitsSearchMinimumCharactersError="Enter first 4 characters of a commit ID",t.Resources.CommitsSearchWrongCharactersError="Commit IDs must be hex digits (0-9 and a-f)",t.Resources.NewBranch="New branch",t.Resources.ClearSelection="Clear selection",t.Resources.DefaultBadge="Default",t.Resources.BranchAriaLabel="{0} Branch",t.Resources.TagAriaLabel="{0} Tag",t.Resources.CommitAriaLabel="{0} Commit",function(e){C=t.RestClientGit={};class o extends s.RestClientBase{constructor(e){super(e)}async getCommitsBatch(e,t,i,s,r,o){const n={$skip:s,$top:r,includeStatuses:o};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/CommitsBatch",routeValues:{project:i,repositoryId:t},queryParams:n,body:e})}async getRefs(e,t,i,s,o,n,a,c,l,d,h){const p={filter:i,includeLinks:s,includeStatuses:o,includeMyBranches:n,latestStatusesOnly:a,peelTags:c,filterContains:l,$top:d,continuationToken:h};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:t,repositoryId:e},queryParams:p,returnRawResponse:!0}).then((async e=>{const t=await e.text().then(r.deserializeVssJsonObject);return t.continuationToken=e.headers.get("x-ms-continuationtoken"),t}))}async createFavorite(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:t},body:e})}async deleteRefFavorite(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:e,favoriteId:t}})}async getRefFavorites(e,t,i){const s={repositoryId:t,identityId:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:e},queryParams:s})}async getRepository(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:t,repositoryId:e}})}}t.RestClientGit.GitClientName="Repos.VersionDropdown.Git.IGitRestClient",t.RestClientGit.getGitClient=function(e,i){return e.getRestClient(t.RestClientGit.GitClientName,i)},i.RestClients.add(t.RestClientGit.GitClientName,{factory:o,options:{resourceAreaId:"4e080c62-fa21-4fbc-8fef-2a10a2b38049",serviceInstanceType:"00025394-6065-48ca-87d9-7f5672854ef7"}})}(),function(e){var i;b=t[e]={},function(e){e.artifactType="Microsoft.TeamFoundation.Git.GitRefFavorite",e.artifactScopeType="Repository"}(i=t[e].GitRefFavoriteArtifactConstants||(t[e].GitRefFavoriteArtifactConstants={}));class s extends o.ObservableArray{dispose(){}}function r(e){return{id:e.id.toString(),artifactId:(t=e.name,(0,a.getVersionString)({version:(0,n.refToBranchName)(t),versionOptions:0,versionType:0})),artifactName:(0,n.getFriendlyName)(e.name),artifactScope:{id:e.repositoryId,type:i.artifactScopeType},artifactType:i.artifactType};var t}t[e].GitRefFavoritesService=class{constructor(e,t,i){this.gitRestClient=e,this.canFavorites=t,this.projectId=i,this._favoritesCollection=new s([])}canUseFavorites(){return this.canFavorites}canFetchExtendedDetails(){return!1}async getFavorites(e,t,o){if(e!==i.artifactType)throw new Error(`Type ${e} not valid. GitRefFavoritesService only supports ${i.artifactType}.`);if(t!==i.artifactScopeType)throw new Error(`Scope ${t} not valid. GitRefFavoritesService only supports ${i.artifactScopeType}.`);return this._favoritesPromise||(this._favoritesPromise=this.gitRestClient.getRefFavorites(this.projectId,o)),this._favoritesPromise.then((e=>(this._favoritesCollection=new s(e.filter((e=>2===e.type)).map(r)),this._favoritesCollection)))}getCurrentFolderFavorites(){if(!this._favoritesPromise)throw new Error("Favorites not loading yet.");const e=new o.ReadyableObservableArray;return this._favoritesPromise.then((t=>{e.push(...t.filter((e=>1===e.type)).map((e=>e.name))),e.ready.value=!0})),e}async addFavorite(e){this._favoritesCollection.push(e);const t=await this.gitRestClient.createFavorite(function(e){return{id:e.id&&parseInt(e.id),name:(0,n.branchNameToRef)(e.artifactName),repositoryId:e.artifactScope.id,type:2}}(e),this.projectId);return e.id=t.id.toString(),e}async removeFavorite(e){this._favoritesCollection.removeAll((t=>t.id===e.id)),await this.gitRestClient.deleteRefFavorite(this.projectId,parseInt(e.id))}}}("GitRefFavoritesService"),function(e){t.GitRefService={};const s=200;class r extends i.VssService{constructor(){super(...arguments),this.myBranchesByRepository={},this.branchesByRepository={},this.tagsByRepository={},this.refsByArea={heads:this.branchesByRepository,tags:this.tagsByRepository},this.branchesCacheListeners=[],this.tagsCacheListeners=[],this.searchBranches=(e,t,i,s)=>this.searchPagedRefs(e,t,i,"heads",s),this.searchTags=(e,t,i,s)=>this.searchPagedRefs(e,t,i,"tags",s)}flushBranchesCache(e){e?(delete this.branchesByRepository[e],delete this.myBranchesByRepository[e]):(this.branchesByRepository={},this.refsByArea.heads=this.branchesByRepository,this.myBranchesByRepository={})}getBranchByName(e,t,i){const r=(0,n.branchNameToRef)(i);let o=this.getMyBranches(e,t).value.filter((e=>(0,c.equals)(e.name,r,!1)))[0];return o||(o=this.getPagedBranches(e,t).items.value.filter((e=>(0,c.equals)(e.name,r,!1)))[0],o)?Promise.resolve(o):(0,C.getGitClient)(this.pageContext).getRefs(e,t,"heads/"+i,void 0,void 0,void 0,void 0,void 0,void 0,s).then((e=>e.filter((e=>(0,c.equals)(e.name,r,!1)))[0]))}getMyBranches(e,t){if(!this.myBranchesByRepository[e]){const i=new o.ReadyableObservableArray;this.myBranchesByRepository[e]=i,(0,C.getGitClient)(this.pageContext).getRefs(e,t,void 0,!1,!1,!0).then((e=>{i.value=e.filter((e=>(0,n.isBranch)(e.name))),i.ready.value=!0}))}return this.myBranchesByRepository[e]}getPagedBranches(e,t){return this.getPagedRefs(e,t,"heads")}getMoreBranches(e,t,i){return this.getMoreRefs(e,t,i,"heads")}getTagByName(e,t,i){const r=(0,n.tagNameToRef)(i),o=this.getPagedTags(e,t).items.value.filter((e=>(0,c.equals)(e.name,r,!0)))[0];return o?Promise.resolve(o):(0,C.getGitClient)(this.pageContext).getRefs(e,t,"tags/"+i,void 0,void 0,void 0,void 0,void 0,void 0,s).then((e=>e.filter((e=>(0,c.equals)(e.name,r,!0)))[0]))}getPagedTags(e,t){return this.getPagedRefs(e,t,"tags")}getMoreTags(e,t,i){return this.getMoreRefs(e,t,i,"tags")}registerBranchesCacheListener(e){this.branchesCacheListeners.push(e)}unregisterBranchesCacheListener(e){const t=this.branchesCacheListeners.indexOf(e);t>=0&&this.branchesCacheListeners.slice(t,1)}registerTagsCacheListener(e){this.tagsCacheListeners.push(e)}unregisterTagsCacheListener(e){const t=this.tagsCacheListeners.indexOf(e);t>=0&&this.tagsCacheListeners.slice(t,1)}getCommitsById(e,t,i){if(!/^[0-9a-fA-F]+$/.test(i)){const e=new o.ReadyableObservableArray([]);return e.ready.value=!0,{continuationToken:null,items:e}}const s=i+"f".repeat(40-i.length),r=i+"0".repeat(40-i.length),n=new o.ReadyableObservableArray;return(0,C.getGitClient)(this.pageContext).getCommitsBatch({$top:100,fromCommitId:r,toCommitId:s},e,t).then((e=>{n.value=e,n.ready.value=!0})),{continuationToken:null,items:n}}getPagedRefs(e,t,i){let r=this.getCachedRefs(i,e);if(!r){const n=new o.ReadyableObservableArray;r={items:n};(0,C.getGitClient)(this.pageContext).getRefs(e,t,i,void 0,void 0,void 0,void 0,void 0,void 0,s).then((e=>{r.continuationToken=e.continuationToken,n.value=e,n.ready.value=!0})),this.cacheRefs(i,e,r)}return r}getMoreRefs(e,t,i,r){const n=this.getCachedRefs(r,e);if(!n)return this.getPagedRefs(e,t,r);if(!n.continuationToken||n.continuationToken!==i)return n;const a=new o.ReadyableObservableArray,c={items:a};return(0,C.getGitClient)(this.pageContext).getRefs(e,t,r,void 0,void 0,void 0,void 0,void 0,void 0,s,n.continuationToken).then((t=>{c.continuationToken=t.continuationToken,a.push(...t),a.ready.value=!0,this.cacheRefs(r,e,c)})),c}searchPagedRefs(e,t,i,r,n){const a=this.getCachedRefs(r,e);if(a){const e=a;if(!e.continuationToken){const t=e.items.value.filter((e=>-1!==e.name.toLowerCase().indexOf(i.toLowerCase()))),s=new o.ReadyableObservableArray(t);return s.ready.value=!0,{items:s}}}const c=new o.ReadyableObservableArray,l={items:c};return(0,C.getGitClient)(this.pageContext).getRefs(e,t,r,void 0,void 0,void 0,void 0,void 0,i,s,n).then((e=>{l.continuationToken=e.continuationToken,c.value=e,c.ready.value=!0})),l}getCachedRefs(e,t){return this.refsByArea[e][t]}cacheRefs(e,t,i){if(this.refsByArea[e][t]){const s=this.refsByArea[e][t],r=new o.ReadyableObservableArray([...s.items.value,...i.items.value]);r.ready.value=!0,this.refsByArea[e][t]={items:r,continuationToken:i.continuationToken}}else this.refsByArea[e][t]=i;this.refsByArea[e][t]=i}}const a="IGitRefService";t.GitRefService.getGitRefService=function(e){return e.getService(a)},i.Services.add(a,{serviceFactory:r})}(),function(e){w=t[e]={};class i extends l.ArtifactDropdownProviderBase{constructor(e,t,i,r,n,l,d){super(),this.pageContext=e,this.versionDropdownOptions=t,this.selection=i,this.searching=r,this.loading=n,this.renderAllBranchesPicker=l,this.onSelect=d,this.continuationTokens={},this.groupToPivotMap={},this.currentIdentityId="",this.commitsFilterText="",this.setSearchLoading=(e,t,i)=>{this.setCommitLoading(e,t);const s=Object.keys(this.continuationTokens),r=this.pivots.find((e=>e.id===i));if(t&&e&&this.searchFunctionsByPivot[i||"branches"]){if(this.searching.value||(this.searching.value=!0),this.lastFilterText||s.forEach((e=>{if(this.continuationTokens[e]){const t=this.getItemsForGroup(e);t&&t.setGroupLoading(e,!1)}})),r){const t=1e3;this.debounceFunction((()=>{this.removeSearchLoadingItem(r);const t=r.items,s=this.getSearchLoadingItem(e,i,"");t.push(s)}),t)}}else this.searching.value&&(this.searching.value=!1),this.timeout&&clearTimeout(this.timeout),r&&this.removeSearchLoadingItem(r),this.lastFilterText&&s.forEach((e=>{if(this.continuationTokens[e]){const t=this.getItemsForGroup(e);t&&t.setGroupLoading(e,!0,this.getLoadingItem(e))}}));this.lastPivot=i,this.lastFilterText=e},this.removeSearchLoadingItem=e=>{const t=e.items,i=t.value.findIndex((t=>t.id===this.getSearchLoadingItemId(e.id)));i>-1&&t.splice(i,1)},this.setCommitLoading=(e,t)=>{const i=this.pivots.find((e=>"commits"===e.id));i&&(this.commitsFilterText=e,e.length>0&&(this.commitsItemProvider.length&&(this.commitsItemProvider.removeAll(),this.forgetCachedArtifacts("commits")),e.length>3?(this.commitsItemProvider.setGroupLoading("found-commits",t,this.getLoadingItem("found-commits")),i.filteredNoResultsText.value=I.CommitsSearchNoResultsText):i.filteredNoResultsText.value=I.CommitsSearchMinimumCharactersError))},this.getDropdownItems=e=>{if(!e){const e=new o.ReadyableObservableArray;return e.ready.value=!0,e}const t=this.pageContext.getService("IVssPerformanceService");t.startScenario("branches-dropdown-get-dropdown-items",!1);const i=this.getVersions(e),r=new o.ReadyableObservableArray,n=()=>{this.continuationTokens[e]=i.continuationToken;const o=this.getItemsForGroup(e);o&&o.setGroupLoading(e,!1);const n=o=>{r.push(...i.items.value.map((t=>s(t,e,this.repository,this.currentIdentityId,o)))),r.ready.value=!0,t.endScenario("Repos","branches-dropdown-get-dropdown-items",!1,void 0,{groupKey:e,count:r.length,hasMore:Boolean(i.continuationToken)})};if(this.viewMyBranches&&this.isAuthorizedUser()){const e=this.gitRefFavoritesService.getCurrentFolderFavorites();this.addObserver(e.ready,(t=>{t&&n(e.value)}))}else n([])};return i.items.ready.value?n():this.addObserver(i.items.ready,(e=>{e&&n()})),this.renderAllBranchesPicker&&r.push({friendlyName:"*",versionDescriptor:{version:"*",versionType:0,versionOptions:0},repositoryId:this.repository.id}),r},this.getClearAction=()=>this.versionDropdownOptions&&this.versionDropdownOptions.viewClearButton?e=>{this.selection&&this.selection.clear(),this.onSelect&&this.onSelect(e,null)}:void 0,this.getBranchesActions=()=>function(e,t,i,s,r){const o=[];e&&r&&o.push({text:I.NewBranch,iconProps:{iconName:"Add"},onClick:()=>e()});t&&o.push({text:I.ClearSelection,iconProps:{iconName:"Cancel"},disabled:i,onClick:t});s&&o.push(...s);return o}(this.versionDropdownOptions.onCreateBranchClick,this.getClearAction(),0===this.selection.selectedCount,this.versionDropdownOptions.otherBranchActions,this.isAuthorizedUser()),this.searchBranchRefs=(e,t)=>this.searchRefs(e,t,"all-branches",this.getGitRefService().searchBranches),this.searchTagRefs=(e,t)=>this.searchRefs(e,t,"all-tags",this.getGitRefService().searchTags),this.repository=t.repository?t.repository:(0,h.getGitRepository)(e);const p={artifactType:b.GitRefFavoriteArtifactConstants.artifactType,artifactScope:{id:this.repository.id,name:this.repository.name,type:b.GitRefFavoriteArtifactConstants.artifactScopeType}},u={0:"OpenSource",1:"Tag",2:"BranchCommit"},v=e=>(t,i)=>e(t&&t.trim(),i),y=new o.ReadyableObservableArray;y.ready.value=!0;const S=e=>this.reuseIfStrictlyStronger(e,f);this.searchFunctionsByPivot={branches:(e=>(t,i)=>this.isGroupFullyLoaded("all-branches")?{items:y}:e(t,i))(v(S(this.searchBranchRefs))),tags:(e=>(t,i)=>this.isGroupFullyLoaded("all-tags")?{items:y}:e(t,i))(v(S(this.searchTagRefs)))},this.viewMyBranches=void 0===t.viewMyBranches||!!t.viewMyBranches,this.viewTagsPivot=void 0===t.viewTagsPivot||!!t.viewTagsPivot,this.groupToPivotMap=function(){const e={default:"branches",favorites:"branches","all-branches":"branches","all-tags":"tags","found-commits":"commits"};return e}();const T=this.createGroups(t,{"all-branches":!0,"all-tags":!0,"found-commits":!1});this.pivots=this.createPivots(t,T,this.groupToPivotMap);const R=this.pageContext.getService("IVssPageService").getData();R&&(this.currentIdentityId=R.user.id);const{id:C}=this.repository.project;this.gitRefFavoritesService=this.getGitRefFavoritesService(C,this.viewMyBranches),this.artifactPickerOptions={pageContext:e,favoritesContext:p,favoritesService:this.gitRefFavoritesService,getArtifacts:this.getDropdownItems,getArtifactId:e=>(0,a.getVersionString)(e.versionDescriptor),getArtifactName:e=>e.friendlyName,getArtifactIcon:e=>({iconName:u[e.versionDescriptor.versionType]}),getArtifactTextNode:g,getFavoriteFromArtifact:c,getArtifactListGroupId:m,groups:T,pivots:this.pivots,groupToPivotMap:this.groupToPivotMap,hideFavoriteSelectedItemIndicator:t.hideFavoriteSelectedItemIndicator},this.initialize(this.artifactPickerOptions),this.getGitRefService().registerBranchesCacheListener(this.forgetCachedArtifacts)}getPivots(){return this.pivots[0].actions=this.getBranchesActions(),this.pivots}dispose(){super.dispose(),this.getGitRefService().unregisterBranchesCacheListener(this.forgetCachedArtifacts)}updatePivot(e){if(this.lastPivot&&this.lastFilterText){const t=this.pivots.find((e=>e.id===this.lastPivot));if(t){const i=t.items,s=i.value.findIndex((t=>t.id===this.getSearchLoadingItemId(e)));s>-1&&i.splice(s,1)}this.setSearchLoading(this.lastFilterText,!0,e)}}getVersions(e){const t=this.continuationTokens[e],{id:i,project:{id:s}}=this.repository;if("found-commits"===e){const{id:e,project:{id:t}}=this.repository;return this.getGitRefService().getCommitsById(e,t,this.commitsFilterText)}return t?"all-tags"===e?this.getGitRefService().getMoreTags(i,s,t):this.getGitRefService().getMoreBranches(i,s,t):"all-tags"===e?this.getGitRefService().getPagedTags(i,s):this.viewMyBranches?this.getMyBranches():this.getGitRefService().getPagedBranches(i,s)}getMyBranches(){const{id:e,project:{id:t}}=this.repository;return{items:this.getGitRefService().getMyBranches(e,t),continuationToken:"!"}}getGitRefFavoritesService(e,t){const i=this.pageContext.getService("IFavoritesService"),s=(0,C.getGitClient)(this.pageContext);return new b.GitRefFavoritesService(s,t&&i.canUseFavorites(),e)}getGitRefService(){return this.pageContext.getService("IGitRefService")}getGroupsLoadingState(){return this.artifactPickerOptions&&this.artifactPickerOptions.groups?this.artifactPickerOptions.groups.reduce(((e,t)=>Object.assign(Object.assign({},e),{[t.id]:t.loading||this.continuationTokens[t.id]})),{}):{}}isGroupFullyLoaded(e){return!this.getGroupsLoadingState()[e]}createGroups({viewCommitsPivot:e},t){return[{id:"default",name:void 0},this.viewMyBranches&&{id:"favorites",name:I.MineBranches},{id:"all-branches",name:I.AllBranches,loading:t["all-branches"],loadingItem:this.getLoadingItem("all-branches")},this.viewTagsPivot&&{id:"all-tags",name:void 0,loading:t["all-tags"],loadingItem:this.getLoadingItem("all-tags")},e&&{id:"found-commits",name:void 0,loading:t["found-commits"],loadingItem:this.getLoadingItem("found-commits")}].filter(Boolean)}processLoadedItems(e,t){if(e){const i=[...t],s="mine-header",r="all-header";t.some((e=>"favorites"===e.groupId))&&!e.value.some((e=>e.id===s))&&i.push({id:s,type:2,text:I.MineBranches,groupId:"favorites"}),t.some((e=>"all-branches"===e.groupId))&&!e.value.some((e=>e.id===r))&&i.push({id:r,type:2,text:I.AllBranches,groupId:"all-branches"}),e.push(...i)}}getLoadingItem(e){return{id:e+"-loading-item",groupId:e,type:4,render:(t,i,s,r)=>d.createElement(u.LoadingCell,{key:r.id,columnIndex:i,tableColumn:s,tableItem:r,onMount:()=>{this.loading.value||(this.loading.value=!0);const t=t=>{const i=this.getItemsForGroup(e);this.processLoadedItems(i,t),this.continuationTokens[e]&&i&&!this.lastFilterText?i.setGroupLoading(e,!0,this.getLoadingItem(e)):this.loading.value&&(this.loading.value=!1)},i=this.onGroupLoadRequest(e);if(i.ready.value)t(i.value);else{const e=e=>{e&&t(i.value)};this.addObserver(i.ready,e)}}})}}getSearchLoadingItemId(e){return e+"-search-loading-item"}getSearchLoadingItem(e,t,i){return{id:this.getSearchLoadingItemId(t),groupId:"tags"===t?"all-tags":"all-branches",type:4,render:(s,r,o,n)=>d.createElement(u.LoadingCell,{key:n.id,columnIndex:r,tableColumn:o,tableItem:n,onMount:()=>{const s=this.searchFunctionsByPivot[t||"branches"](e,i),r=()=>{const i=this.processResolvedArtifacts(s.items.value,t),r=this.pivots.find((e=>e.id===t));if(r){const o=r.items;this.processLoadedItems(o,i);const n=o.value.findIndex((e=>e.id===t+"-search-loading-item"));n>-1&&o.splice(n,1),s.continuationToken?o.push(this.getSearchLoadingItem(e,t,s.continuationToken)):this.searching.value=!1}};if(s.items.ready.value)r();else{const e=e=>{e&&r()};this.addObserver(s.items.ready,e)}}})}}getItemsForGroup(e){const t=this.pivots.findIndex((t=>t.id===this.groupToPivotMap[e]));if(t>-1)return this.pivots[t].items}createPivots(e,t,i){const s={id:"branches",name:I.PivotBranches,actions:this.getBranchesActions(),filterPlaceholderText:I.BranchesSearchTextPlaceholder,filteredNoResultsText:I.BranchesSearchNoResultsText,showFilterBox:!0,items:new v.GroupedItemProvider([],t.filter((e=>"branches"===i[e.id])))},r={id:"tags",name:I.PivotTags,actions:this.versionDropdownOptions.otherTagActions,filterPlaceholderText:I.TagsSearchTextPlaceholder,filteredNoResultsText:I.TagsSearchNoResultsText,noItemsText:I.TagsNoItemsText,showFilterBox:!0,items:new v.GroupedItemProvider([],t.filter((e=>"tags"===i[e.id])))};this.commitsItemProvider=new v.GroupedItemProvider([],t.filter((e=>"commits"===i[e.id])));const n={id:"commits",name:I.PivotCommits,filterByText:!1,filterPlaceholderText:I.CommitsSearchTextPlaceholder,filteredNoResultsText:new o.ObservableValue(I.CommitsSearchMinimumCharactersError),noItemsText:I.CommitsSearchMinimumCharactersError,showFilterBox:!0,items:this.commitsItemProvider};return[s,this.viewTagsPivot&&r,e.viewCommitsPivot&&n].filter(Boolean)}searchRefs(e,t,i,r){const n=this.pageContext.getService("IVssPerformanceService");n.startScenario("branches-dropdown-search-refs",!1),t||(t=this.continuationTokens[i]);const{id:a,project:{id:c}}=this.repository,l=()=>{h.push(...d.items.value.map((e=>s(e,i,this.repository,this.currentIdentityId,[])))),n.endScenario("Repos","branches-dropdown-search-refs",!1,void 0,{count:h.length,hasMore:Boolean(d.continuationToken)}),p.continuationToken=d.continuationToken,h.ready.value=!0},d=r(a,c,e,t),h=new o.ReadyableObservableArray,p={items:h,continuationToken:d.continuationToken};return d.items.ready.value?l():this.addObserver(d.items.ready,(e=>{e&&l()})),p}reuseIfStrictlyStronger(e,t){let i,s;return(r,o)=>{const n=()=>(i=r,s=e(r,o),s);if(this.isStrictlyStronger(r,i)){const e=e=>{e&&t(e)||n()};return s.items.ready.value?e(s):this.addObserver(s.items.ready,(t=>{t&&e(s)})),s}return n()}}debounceFunction(e,t,...i){this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout((()=>{this.timeout=void 0,e.apply(null,i)}),t)}isStrictlyStronger(e,t){return Boolean(e&&t&&e.toLowerCase().indexOf(t.toLowerCase())>=0)}isAuthorizedUser(){return(0,p.userHasClaim)(this.pageContext,"member")}}function s(e,t,i,s,o){if("found-commits"===t)return{friendlyName:n.getShortCommitId(e.commitId),versionDescriptor:{version:e.commitId,versionType:2,versionOptions:0},repositoryId:i.id};{const t=n.isTag(e.name),a=n.getFriendlyName(e.name);return{friendlyName:a,versionDescriptor:{version:a,versionType:t?1:0,versionOptions:0},isMine:e.creator&&e.creator.id===s,isDefault:e.name===i.defaultBranch,isFavoritedByFolder:!t&&r(e.name,o),repositoryId:i.id}}}function r(e,t){return t.some((t=>e.startsWith(t+"/")))}function c(e){if(0===e.versionDescriptor.versionType&&!e.isDefault)return{artifactId:(0,a.getVersionString)(e.versionDescriptor),artifactName:e.friendlyName,artifactScope:{id:e.repositoryId,type:b.GitRefFavoriteArtifactConstants.artifactScopeType},artifactType:b.GitRefFavoriteArtifactConstants.artifactType}}function m(e){return 2===e.versionDescriptor.versionType?"found-commits":1===e.versionDescriptor.versionType?"all-tags":e.isDefault?"default":e.isMine||e.isFavoritedByFolder?"favorites":"all-branches"}function g(e){const t=e.data;if(!t)return;const{prefix:i,lastName:s}=2===t.versionDescriptor.versionType?{lastName:e.text}:function(e){const t=e.lastIndexOf("/");return t>0?{prefix:e.substring(0,t+1),lastName:e.substring(t+1)}:{lastName:e}}(e.text||"");return d.createElement("span",null,i&&d.createElement("span",{className:"version-dropdown-prefix-name"},i),s,t.isDefault&&d.createElement("span",{className:"version-dropdown-default-badge"},I.DefaultBadge))}function f(e){return!e.continuationToken}t[e].VersionDropdownProvider=i,t[e].getItemFromVersion=function(e,t){const i=2===e.versionType;let s=e.version;return i&&(s=n.getShortCommitId(s)),{versionDescriptor:e,friendlyName:s,isDefault:s===n.getFriendlyName(t.defaultBranch),repositoryId:t.id}}}("VersionDropdownProvider"),function(e){x=t[e]={};t[e].VersionDropdownExpandableButton=e=>{const{initiallySelectedItem:t,placeholder:i}=e,s=__rest(e,["initiallySelectedItem","placeholder"]);return d.createElement(f.DropdownExpandableButton,Object.assign({},s,{placeholder:e.initiallySelectedItem?void 0:i,subtle:!0}),e.initiallySelectedItem?(0,m.renderSelectedItem)(e.initiallySelectedItem):null)};t[e].VersionDropdownExpandableTextField=e=>{const{initiallySelectedItem:t,placeholder:i}=e,s=__rest(e,["initiallySelectedItem","placeholder"]);return d.createElement(f.DropdownExpandableTextField,Object.assign({},s,{placeholder:e.initiallySelectedItem?e.initiallySelectedItem.text:i,prefixIconProps:e.initiallySelectedItem&&0===e.selection.selectedCount?e.initiallySelectedItem.iconProps:void 0,renderSelectedItems:(e,t)=>t[e.value[0].beginIndex].text||""}))};class i extends g.VssComponent{constructor(e,t){super(e,t),this.selection=new T.DropdownSelection,this.hasMadeInitialSelection=!1,this.dropdown=d.createRef(),this.selectedPivot=new o.ObservableValue(""),this.searching=new o.ObservableValue(!1),this.loading=new o.ObservableValue(!1),this.resetSelection=()=>{const e=this.props.initiallySelectedVersion&&this.props.initiallySelectedVersion.version;if(this.provider.value.length>0&&e)for(let t=0;t<this.provider.value.length;t++)if(this.provider.value[t].data&&this.provider.value[t].data.versionDescriptor.version===e)return this.selection.select(t),void(this.hasMadeInitialSelection=!0)},this.onItemsUpdated=()=>(this.hasMadeInitialSelection||this.resetSelection(),!1),this.onFilterTextChanged=(e,t)=>{this.provider.setSearchLoading(t,null!==e,this.selectedPivot.value),this.props.onFilterTextChanged&&this.props.onFilterTextChanged(e,t)},this.onSelectedPivotUpdated=()=>{this.provider.updatePivot(this.selectedPivot.value)},this.provider=new w.VersionDropdownProvider(t.pageContext,e.providerOptions||{},this.selection,this.searching,this.loading,e.renderAllBranchesPicker,this.props.onSelect);let i=this.provider.getPivots()[0].id;e.initiallySelectedVersion&&(0===e.initiallySelectedVersion.versionType?i="branches":2===e.initiallySelectedVersion.versionType?i="commits":1===e.initiallySelectedVersion.versionType&&(i="tags")),this.selectedPivot.value=i}render(){const{autoFocus:e,className:t,focusTreatment:i,onSelect:s,initiallySelectedVersion:r,isDropdownFullWidth:o,placeholder:n,providerOptions:a,renderExpandable:c}=this.props;return d.createElement(y.Observer,{selection:this.selection,items:{observableValue:this.provider,filter:this.onItemsUpdated},selectedPivot:{observableValue:this.selectedPivot,filter:this.onSelectedPivotUpdated}},(()=>{var l;this.selection.value.length?this.provider.value[this.selection.value[0].beginIndex].text:null===(l=this.props.initiallySelectedVersion)||void 0===l||l.version;return d.createElement(m.ArtifactDropdown,{ref:this.dropdown,calloutContentClassName:(0,S.css)(!o&&"version-dropdown-callout"),className:(0,S.css)(t,"version-dropdown scroll-hidden"),items:this.provider,loading:this.loading,onFilterTextChanged:this.onFilterTextChanged,onSelect:s,pivots:this.provider.getPivots(),placeholder:n,searching:this.searching,selection:this.selection,selectedPivot:this.selectedPivot,showItemsWhileSearching:!0,renderExpandable:t=>d.createElement(y.Observer,{selection:this.selection},(()=>{const s=Object.assign(Object.assign({},t),{autoFocus:e,focusTreatment:i,initiallySelectedItem:0===this.selection.selectedCount&&r&&!this.hasMadeInitialSelection?this.provider.getListItem((0,w.getItemFromVersion)(r,a&&a.repository?a.repository:(0,h.getGitRepository)(this.context.pageContext))):void 0});return c(s)})),width:o?void 0:480})}))}expand(){this.dropdown.current&&this.dropdown.current.expand()}focus(){this.dropdown.current&&this.dropdown.current.focus()}componentWillUnmount(){this.provider.dispose()}}t[e].VersionDropdown=i,i.defaultProps={renderExpandable:t[e].VersionDropdownExpandableButton}}("ComponentsVersionDropdown"),function(e){t[e]={};class i extends R.FilterBarItem{constructor(){super(...arguments),this.dropdown=d.createRef(),this.onSelectBranch=(e,t)=>{this.setFilterValue({value:t?t.text:null})}}render(){return d.createElement(x.VersionDropdown,{ref:this.dropdown,onSelect:this.onSelectBranch,placeholder:this.props.placeholder,initiallySelectedVersion:this.props.initiallySelectedItem?(0,a.gitVersionStringToVersionDescriptor)(`GB${(0,n.refToBranchName)(this.props.initiallySelectedItem)}`):void 0,providerOptions:{viewClearButton:!0,viewTagsPivot:!1},renderExpandable:e=>d.createElement(x.VersionDropdownExpandableTextField,Object.assign({},e,{className:"repos-version-dropdown-filterbaritem flex-row flex-grow"}))})}focus(){this.dropdown.current&&this.dropdown.current.focus()}}t[e].VersionDropdownFilterBarItem=i}("ComponentsVersionDropdownFilterBarItem"),function(e){t[e]={};t[e].VersionDropdownAsTextField=e=>d.createElement(x.VersionDropdown,Object.assign({},e,{renderExpandable:x.VersionDropdownExpandableTextField})),g.Components.add("ms.vss-code-web.version-dropdown-as-textfield",t[e].VersionDropdownAsTextField)}("ComponentsVersionDropdownAsTextField")}),["Resources","RestClient/Git","GitRefFavoritesService","GitRefService","VersionDropdownProvider","Components/VersionDropdown","Components/VersionDropdownFilterBarItem","Components/VersionDropdownAsTextField"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-code-web.version-dropdown"}}));